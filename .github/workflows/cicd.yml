name: Infrastructure Deployment

on:
  push:
    branches: [ main ]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  TERRAFORM_DIR: 'terraform'

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      
    - name: Terraform Init
      working-directory: ${{ github.workspace }}/terraform
      run: terraform init

    - name: Terraform Taint Key Pair
      working-directory: ${{ github.workspace }}/terraform
      run: terraform taint aws_key_pair.generated_key

    - name: Terraform Taint Security Group
      working-directory: ${{ github.workspace }}/terraform
      run: terraform taint aws_security_group.allow_http_https

    - name: Terraform Apply
      working-directory: ${{ github.workspace }}/terraform
      run: terraform apply -auto-approve

    - name: Display Terraform Outputs
      working-directory: ${{ github.workspace }}/terraform
      run: terraform output
      
    - name: Get Server IP Address
      id: server_ip
      working-directory: ${{ github.workspace }}/terraform
      run: |
        server_ip=$(terraform output -raw server_ip)
        echo "::set-output name=server_ip::$server_ip"
        
    - name: Get Private Key
      id: private_key
      working-directory: ${{ github.workspace }}/terraform
      run: |
        private_key=$(terraform output -raw private_key)
        echo "::set-output name=private_key::$private_key"
        
    # - name: Deploy Application
    #   env:
    #     PRIVATE_KEY: ${{ steps.private_key.outputs.private_key }}
    #   run: |
    #     # Enregistrer la clé privée dans un fichier temporaire
    #     echo "$PRIVATE_KEY" > ~/.ssh/id_rsa
    #     chmod 600 ~/.ssh/id_rsa
        
    #     # Déployer l'application sur le serveur en utilisant l'adresse IP récupérée
    #     ssh -i ~/.ssh/id_rsa user@${{ steps.server_ip.outputs.server_ip }} "cd /path/to/application && ./deploy.sh"
